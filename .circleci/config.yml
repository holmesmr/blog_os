version: 2
jobs:
  prepare_image:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/blog_os
    steps:
      - checkout
      - restore_cache:
          key: v1-cargo-checkpoint
          paths:
            - /usr/local/cargo/
      - restore_cache:
          key: v1-target-checkpoint
          paths:
            - ~/target
      - run:
          name: Prepare target workspaces
          command: |
            mkdir -p ~/target/bootimage
            mkdir -p ~/target/cargo-xbuild
      - run:
          name: Install bootimage
          command: CARGO_TARGET_DIR=~/target/bootimage cargo install bootimage --version "^0.5.0" --force
      - run:
          name: Install cargo-xbuild
          command: CARGO_TARGET_DIR=~/target/cargo-xbuild cargo install cargo-xbuild --force
      - run:
          name: Install compiler source
          command: rustup component add rust-src
      - save_cache:
          key: v1-cargo-checkpoint
          paths:
            - /usr/local/cargo/
      - save_cache:
          key: v1-target-checkpoint
          paths:
            - ~/target
      - save_cache:
          key: v1-cargo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /usr/local/cargo/
      - save_cache:
          key: v1-compiler-src-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - /usr/local/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/blog_os
  build:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      - restore_cache:
          key: v1-cargo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-compiler-src-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
      - run:
          name: Setup environment
          command: |
            echo 'export PATH="/usr/local/cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Build release
          command: bash ./kbuild.sh build release
      - run:
          name: Build debug
          command: bash ./kbuild.sh build debug
      - save_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
          paths:
            - ~/blog_os/target
  test:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      - restore_cache:
          key: v1-cargo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
      - run:
          name: Setup environment
          command: |
            echo 'export PATH="/usr/local/cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Run unit tests
          command: bash ./kbuild.sh test
      - save_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
          paths:
            - ~/blog_os/target
  integration_test:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      - restore_cache:
          key: v1-cargo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-compiler-src-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
      - run:
          name: Setup environment
          command: |
            echo 'export PATH="/usr/local/cargo/bin:$PATH"' >> $BASH_ENV
      - run:
          name: Install QEMU
          command: apt-get -y update && apt-get -y install qemu-system-x86
      - run:
          name: Run integration tests
          command: bash ./kbuild.sh integration-test
      - save_cache:
          key: v1-cargo-local-{{ checksum "Cargo.lock" }}
          paths:
            - ~/blog_os/target
workflows:
  version: 2
  build_and_test:
    jobs:
      - prepare_image
      - build:
          requires:
            - prepare_image
      - test:
          requires:
            - prepare_image
      - integration_test:
          requires:
            - prepare_image